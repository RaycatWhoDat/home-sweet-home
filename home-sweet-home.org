#+TITLE: Home Sweet Home v2.7
#+AUTHOR: RaycatWhoDat
#+STARTUP: showall
#+PROPERTY: header-args :tangle config.el

** Introduction
This is the second iteration of the HSH configuration system for
Emacs. Most of the categories are separated by function with the
highest priority packages coming up first.

** Bootstrapping
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;; This file (early-init.el) is auto-generated by config.org.
  ;; Making any changes to this file may result in those changes being discarded.

  (setq package-enable-at-startup nil)
  (setq package-check-signature nil)

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; This file (init.el) is auto-generated by config.org.
  ;; Making any changes to this file may result in those changes being discarded.

  (defvar bootstrap-version)
  (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
        (url-retrieve-synchronously
          "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'org)
  (require 'org)
  (straight-use-package 'use-package)
  (require 'use-package)

  (add-to-list 'load-path (expand-file-name "extra" user-emacs-directory))

  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  (add-hook 'eshell-load-hook #'eat-eshell-mode)
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)
#+END_SRC

*** Utilities
#+BEGIN_SRC emacs-lisp :tangle init.el
  (defmacro use-packages (&rest packages)
    "Creates `straight-use-package` declarations for each package in PACKAGES."
    (let ((results '()))
      (dolist (package packages)
        (push `(straight-use-package (quote ,package)) results))
      `(progn ,@(nreverse results))))

  (defmacro qw (&rest symbols)
    "Returns a quoted list of strings."
    `(list ,@(mapcar (lambda (symbol) (format "%s" symbol)) symbols)))

  (defmacro %% (number &rest divisors)
    "Returns T or NIL if NUMBER is evenly divisible by all DIVISORS."
    `(and ,@(mapcar (lambda (divisor) `(zerop (mod ,number ,divisor))) divisors)))

  (defmacro between (number min max)
    "Returns T or NIL if NUMBER is between MIN and MAX, inclusive."
    `(and (>= ,number ,min) (<= ,number ,max)))

  (defmacro polymod (number &rest divisors)
    "Returns a list of modulo results with the remainder as the first element."
    (let ((mutnum number)
           (results '()))
      (dolist (divisor divisors)
        (setq results (cons (mod mutnum divisor) results))
        (setq mutnum (/ mutnum divisor)))
      `(reverse (list ,mutnum ,@results))))

  (defmacro letter-sequence (start end)
    "Returns a list of quoted letters."
    `(mapcar
       'char-to-string
       (remove-if-not
         (lambda (character) (or (between character 65 90) (between character 97 122)))
         (number-sequence (string-to-char ,start) (string-to-char ,end)))))

  (defun current-line ()
    "Returns the current line number at point."
    (save-restriction
      (widen)
      (save-excursion
        (beginning-of-line)
        (1+ (count-lines 1 (point))))))

  (defun insert-js-logpoint (&optional message)
    "Given a string called MESSAGE, insert a JS-style logpoint that contains
        that message."
    (interactive "sOptional message: ")
    (insert
      (format
        "\nconsole.log(%S, %S);"
        (concat (buffer-name) ":" (number-to-string (1+ (current-line))) ":")
        (if (zerop (length message)) "Logpoint!" message))))

   (defun insert-content-setting-store-entry (field-key)
    "Given a string called FIELD-KEY, insert a JavaScript statement that uses FIELD-KEY."
    (interactive "sField key: ")
    (insert
      (format
        "const %s = msStore.getComposableWindowItem(%S);\n"
        field-key
        field-key)))

  (defun move-ffxiv-screenshots ()
    "Moves all of the Steam screenshots for FFXIV to the Desktop."
    (interactive)
    (let ((old-path "$HOME/.steam/debian-installation/userdata/45746305/760/remote/39210/screenshots/")
           (new-path "$HOME/Desktop/"))
      (dolist (file (directory-files old-path nil ".jpg"))
        (let ((old-full-path (s-concat old-path file))
               (new-full-path (s-concat new-path file)))
          (copy-file old-full-path new-full-path)
          (delete-file old-full-path)
          (call-process "/usr/bin/convert" nil nil nil
            new-full-path "-crop" "580x700+64+440" "+repage" (s-concat new-path "crop_" file))))))

  (defun format-for-ffxiv-relay ()
    "Formats text in the buffer to be ready for relay."
    (interactive)
    (beginning-of-buffer)
    (replace-regexp (rx bol (group (+ (not ">")) ">")) "/fc"))
#+END_SRC

*** Initialization Postscript
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Load tangled config
  (load (expand-file-name "config.el" user-emacs-directory) t)
#+END_SRC

*** Configuration Preamble
#+BEGIN_SRC emacs-lisp
  ;; This file (config.el) is automatically generated by config.org.
  ;; Any changes to this file will automatically be overwritten.
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
  ;; Essential packages.
  (use-packages s f ht ov dash seq stream request el-patch change-inner)

  (use-packages restart-emacs cl-lib async bind-key paradox crux elmacro run-command)

  ;; High priority graphical packages.
  (use-packages all-the-icons diminish hyperbole)

  ;; High priority movement packages.
  (use-packages ace-window buffer-move hydra iedit projectile)

  (use-package company
    :straight t
    :config (progn
              (setq company-idle-delay 0
                company-show-numbers t
                company-tooltip-align-annotations t)))

  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :ensure t
    :config (progn
              (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
              (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)))

  (use-package counsel
    :straight t
    :diminish t)

  (use-package which-key
    :straight t
    :diminish t
    :config (which-key-mode 1))

  ;; Major modes and packages for languages.
  (use-packages
    clojure-mode
    d-mode
    dart-mode
    docker-compose-mode
    dockerfile-mode
    fennel-mode
    gdscript-mode
    graphql-mode
    go-mode
    janet-mode
    julia-mode
    kotlin-mode
    haxe-mode
    lua-mode
    markdown-mode
    nim-mode
    pandoc-mode
    php-mode
    raku-mode
    racket-mode
    rjsx-mode
    rust-mode
    ssass-mode
    solidity-mode
    swift-mode
    typescript-mode
    v-mode
    yaml-mode
    zig-mode)

  (use-package web-mode
    :straight t
    :config (progn
              (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
              (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
              (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
              (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))))

  (use-package cargo
    :straight t)

  (use-package doom-themes
    :straight t
    :config (progn
              (setq doom-themes-enable-bold t
                doom-themes-enable-italic t)
              (load-theme 'doom-one t)
              (doom-themes-visual-bell-config)
              (doom-themes-org-config)))

  (use-packages ob-dsq)

  (use-package emmet-mode
    :straight t
    :config (progn
              (add-hook 'sgml-mode-hook 'emmet-mode)
              (add-hook 'css-mode-hook 'emmet-mode)
              (add-hook 'mhtml-mode-hook 'emmet-mode)))

  (use-packages eshell-toggle expand-region)

  (use-package eshell-git-prompt
    :straight t
    :config (eshell-git-prompt-use-theme 'git-radar))

  (use-package exec-path-from-shell
    :straight t
    :config (progn
              (setq exec-path-from-shell-check-startup-files nil)
              (exec-path-from-shell-initialize)))

  (use-packages 
    flycheck
    free-keys
    golden-ratio)

  (use-package ivy
    :straight t
    :config (progn
              (setq ivy-use-virtual-buffers t
                enable-recursive-minibuffers t)
              (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
              (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
              (ivy-mode 1)))

  (use-packages
    lorem-ipsum
    lsp-mode
    lsp-ui
    magit
    magit-popup
    markup-faces
    memoize
    nodejs-repl
    ob-async
    ob-http
    ob-restclient
    ob-typescript
    olivetti)

  (use-package org-bullets
    :straight t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))

  (use-package org-d20
    :straight t)
  (use-package org-present
    :straight t
    :config (progn
              (add-hook 'org-present-mode-hook
                (lambda ()
                  (org-present-big)
                  (org-display-inline-images)
                  (org-present-hide-cursor)
                  (org-present-read-only)))
              (add-hook 'org-present-mode-quit-hook
                (lambda ()
                  (org-present-small)
                  (org-remove-inline-images)
                  (org-present-show-cursor)
                  (org-present-read-write)))))

  (use-package pdf-tools
    :straight t)
  (use-package perspective
    :straight t
    :config (setq persp-suppress-no-prefix-key-warning t))

  (use-packages
    quelpa
    request
    restclient)

  (use-package rich-minority
    :straight t
    :config (progn (setq rm-whitelist
                     (format "^ \\(%s\\)$"
                       (mapconcat #'identity '() "\\|")))
              (rich-minority-mode 1)))

  (use-packages rmsbolt)

  (use-package smart-mode-line
    :straight t
    :config (progn
              (setq sml/no-confirm-load-theme t
                sml/theme 'respectful)
              (sml/setup)))

  (use-packages queue diff)

  (use-package undo-tree
    :straight t
    :diminish t
    :config (progn
              (setq undo-tree-visualizer-diff t
                undo-tree-visualizer-timestamps t
                undo-tree-enable-undo-in-region nil)
              (global-undo-tree-mode 1)))

  (use-packages
    unicode-escape
    sudo-edit
    swiper
    tide
    transient
    transpose-frame
    with-editor
    yasnippet
    annotate)

  (use-package dirvish
    :straight t
    :config (progn
              (dirvish-override-dired-mode)))

  (straight-use-package 'tree-sitter)
  (straight-use-package 'tree-sitter-langs)
  (require 'tree-sitter)
  (require 'tree-sitter-langs)

  (straight-use-package '(tsi :type git :host github :repo "orzechowskid/tsi.el"))
  (require 'tsi-typescript)
  (require 'tsi-json)

  (straight-use-package '(odin-mode :type git :host github :repo "mattt-b/odin-mode"))
  (straight-use-package 'uiua-mode)

  (use-packages
    posframe
    eat
    dslide
    symbol-overlay
    ctrlf
    marginalia
    embark
    consult
    dape
    visual-replace)

  (use-package howm
    :straight t
    :init
    (setq howm-directory "~/Desktop/notes")
    (setq howm-home-directory howm-directory)
    ;; What format to use for the files?
    (setq howm-file-name-format "%Y-%m-%d-%H%M%S.org")
    (setq howm-view-title-header "*")
    (setq howm-dtime-format "<%Y-%m-%d %a %H:%M>")
    ;; Avoid conflicts with Org-mode by changing Howm's prefix from "C-c ,".
    (setq howm-prefix (kbd "C-c ;"))
    :bind*
    ;; Conveniently open the Howm menu with "C-c ; ;".
    ("C-c ; ;" . howm-menu))

  ;; Diminish forms.
  (diminish 'jiggle-mode)
  (diminish 'auto-revert-mode)
  (diminish 'visual-line-mode)
  (diminish 'undo-tree-mode)
  (diminish 'abbrev-mode)
  (diminish 'ivy-mode)
  (diminish 'which-key-mode)
#+END_SRC

** Configuration
*** Org Babel
#+BEGIN_SRC emacs-lisp
  ;; All the org-babel-languages.
  (setq loaded-languages '(emacs-lisp js typescript shell http))

  (when (boundp 'org-babel-raku-wrapper)
    (setq loaded-languages (append loaded-languages '(raku))))

  (setq shell-file-name "/bin/zsh")
  (setq shell-command-switch "-ic")

  ;; Build the org-babel-load-languages list.
  ;; This uses `loaded-languages' which should be set.
  (let ((language-list '()))
    (dolist (language loaded-languages language-list)
      (add-to-list 'language-list (cons language t) t))
    (org-babel-do-load-languages 'org-babel-load-languages language-list))
#+END_SRC

*** Keybindings (Hydras)
#+BEGIN_SRC emacs-lisp
  (defhydra hsh-applications (:color blue)
    "

    HSH/Applications
    ================

    _k_: Paradox
    _u_: Undo Tree

    "
    ("k" paradox-list-packages nil)
    ("u" undo-tree-visualize nil))

  (defhydra hsh-buffers (:color blue)
    "

    HSH/Buffers
    ===========

          _C-p_/_<up>_                   _b_: Find Buffers
   _C-b_/_<left>_      _C-f_/_<right>_       _d_: Kill This Buffer
         _C-n_/_<down>_                  _D_: Kill Other Buffers
                                     _s_: Switch to *scratch*

                                     _RET_: Cancel

    "
    ("RET" nil nil)
    ("<up>" buf-move-up nil :color red)
    ("<down>" buf-move-down nil :color red)
    ("<left>" buf-move-left nil :color red)
    ("<right>" buf-move-right nil :color red)
    ("C-p" buf-move-up nil :color red)
    ("C-n" buf-move-down nil :color red)
    ("C-b" buf-move-left nil :color red)
    ("C-f" buf-move-right nil :color red)
    ("b" ivy-switch-buffer nil)
    ("d" kill-this-buffer nil)
    ("D" shortcuts/kill-other-buffers nil)
    ("s" shortcuts/switch-to-scratch-buffer nil))

  (defhydra hsh-config (:color blue)
    "

    HSH/Config
    ==========

    _i_: Bootstrapping
    _o_: Config Org

    "
    ("i" shortcuts/edit-elisp-init-file nil)
    ("o" shortcuts/edit-org-init-file nil))

  (defhydra hsh-eval (:color blue)
    "

    HSH/Eval
    ========

    _s_: Replace last sexp

    "
    ("s" crux-eval-and-replace nil))

  (defhydra hsh-files (:color blue)
    "

    HSH/Files
    =========

    _f_: Find File
    _p_: [Project]
    _w_: Write File
    _R_: Revert Buffer

    "
    ("w" write-file nil)
    ("p" hsh-project/body nil)
    ("f" counsel-find-file nil)
    ("R" revert-buffer nil))

  (defhydra hsh-git (:color blue)
    "

    HSH/Git
    =======

    _b_: Forward Blame         _d_: Diff Unstaged
    _q_: Back Blame            _D_: Diff Staged

    _g_: Dispatch Popup     _f_: Find File
    _s_: Status

    "
    ("b" magit-blame nil)
    ("q" magit-blame-quit nil)
    ("g" magit-dispatch-popup nil)
    ("s" magit-status nil)
    ("f" magit-find-file nil)
    ("d" magit-diff-unstaged nil)
    ("D" magit-diff-staged nil))

  (defhydra hsh-jump-to (:color blue)
    "

    HSH/Jump To
    ===========

    _m_: Minibuffer

    "
    ("m" shortcuts/switch-to-minibuffer nil))

  (defhydra hsh-insertion (:color blue)
    "

    HSH/Insertion
    =============

    Lipsum                  Utilities
    ------                  ---------
    _p_: Paragraph            _l_: Logpoint
    _s_: Sentence

    "
    ("l" insert-js-logpoint nil)
    ("p" lorem-ipsum-insert-paragraphs nil)
    ("s" lorem-ipsum-insert-sentences nil))

  (defhydra hsh-narrowing (:color blue)
    "

    HSH/Narrowing
    =============

    _f_: To Function
    _r_: To Region
    _w_: Widen

    "
    ("f" narrow-to-defun nil)
    ("r" narrow-to-region nil)
    ("w" widen nil))

  (defhydra hsh-org-clock (:color blue)
    "

    HSH/Org/Clock
    =============

    _i_: Clock In
    _o_: Clock Out
    _r_: Report
    _t_: Timestamp

    "
    ("i" org-clock-in nil)
    ("o" org-clock-out nil)
    ("r" org-clock-report nil)
    ("t" org-time-stamp nil))

  (defhydra hsh-org (:color blue)
    "

    HSH/Org
    =======

    _c_: [Clock]
    _o_: Capture
    _t_: Todo

    "
    ("c" hsh-org-clock/body nil :exit t)
    ("o" org-capture nil)
    ("t" org-todo nil))

  (defhydra hsh-project (:color blue)
    "

    HSH/Project
    ===========

    _f_: Find File

    "
    ("f" projectile-find-file nil))

  (defhydra hsh-quit (:color blue)
    "

    HSH/Quit
    ========

    _q_: Save and Quit
    _r_: Restart

    "
    ("q" save-buffers-kill-emacs nil)
    ("r" restart-emacs nil))

  (defhydra hsh-registers-resume (:color blue)
    "

    HSH/Registers-Resume
    ====================

    Registers           Resume
    ---------           ------
    _y_: Kill Ring      _r_: Ivy Resume

    "
    ("r" ivy-resume nil)
    ("y" counsel-yank-pop nil))

  (defhydra hsh-search (:color blue)
    "

    HSH/Search
    ==========

    Rg
    --
    _f_: Files

    "

    ("f" counsel-rg nil))

  (defhydra hsh-windows (:color blue)
    "

    HSH/Windows
    ===========

      _w_: Golden Ratio
      _d_: Delete This Window
      _D_: Delete Other Windows
      _s_: Horiz. Split
      _v_: Vert. Split

    "
    ("w" golden-ratio nil)
    ("d" delete-window nil)
    ("D" delete-other-windows nil)
    ("s" split-window-below nil)
    ("v" split-window-right nil))

  (defhydra hsh-perspective (:color blue)
    "

    HSH/Perspective
    ===============

      _s_: Switch Perspective
      _a_: Add Buffer to Perspective
      _k_: Remove Buffer from Perspective
      _r_: Rename Perspective
      _d_: Delete Perspective

    "
    ("s" persp-switch nil)
    ("a" persp-add-buffer nil)
    ("k" persp-remove-buffer nil)
    ("r" persp-rename nil)
    ("d" persp-kill nil))

  (defhydra hsh-symbols (:color blue)
    "

      HSH/Symbols
      ===========

        _t_: Toggle Mode 
        _i_: Insert Overlays
        _r_: Remove All Overlays
        _p_: Previous Symbol
        _n_: Next Symbol

      "
    ("t" symbol-overlay-mode nil)
    ("i" symbol-overlay-put nil)
    ("r" symbol-overlay-remove-all nil)
    ("p" symbol-overlay-jump-prev nil)
    ("n" symbol-overlay-jump-next nil))
#+END_SRC

*** HSH Leader Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hsh-leader (:color blue)
    "

    Home Sweet Home
    ===============
    _a_: [Applications]      _g_: [Git]              _p_: [Perspective]          _y_: [Symbols]
    _b_: [Buffers]           _j_: [Jump To]          _q_: [Quit]
    _c_: [Config]            _i_: [Insertion]        _r_: [Registers/Resume]
    _e_: [Eval]              _n_: [Narrowing]        _s_: [Search]
    _f_: [Files]             _o_: [Org]              _w_: [Windows]

    _C-;_: M-x
    _-_: Eshell, _=_: Full Shell

    "
    ("a" hsh-applications/body nil)
    ("b" hsh-buffers/body nil)
    ("c" hsh-config/body nil)
    ("e" hsh-eval/body nil)
    ("f" hsh-files/body nil)
    ("g" hsh-git/body nil)
    ("j" hsh-jump-to/body nil)
    ("i" hsh-insertion/body nil)
    ("n" hsh-narrowing/body nil)
    ("o" hsh-org/body nil)
    ("p" hsh-perspective/body nil)
    ("q" hsh-quit/body nil)
    ("r" hsh-registers-resume/body nil)
    ("s" hsh-search/body nil)
    ("w" hsh-windows/body nil)
    ("y" hsh-symbols/body nil)
    ("C-;" counsel-M-x nil)
    ("C-g" (message "Cancelled HSH.") nil :exit t)
    ("-" eshell-toggle nil)
    ("=" settings/open-shell nil)
    ("TAB" shortcuts/alternate-buffers nil))
#+END_SRC

*** Keybindings (Global)
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "<f2> <f2>"))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-'"))
  (global-unset-key (kbd "s-m"))

  (global-set-key (kbd "C-SPC") 'shortcuts/select-entire-line)
  (global-set-key (kbd "C-x 2") 'shortcuts/split-vertically-and-rebalance)
  (global-set-key (kbd "C-x 3") 'shortcuts/split-horizontally-and-rebalance)
  (global-set-key (kbd "C-x 9") 'golden-ratio)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-c n") 'make-frame)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "s-\\") 'hippie-expand)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x o") 'ace-window)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
  (global-set-key (kbd "M-Z") 'zap-to-char)
  (global-set-key (kbd "C-<left>") 'previous-buffer)
  (global-set-key (kbd "C-<right>") 'next-buffer)

  ;; Crux commands
  (global-set-key (kbd "C-c d") 'crux-duplicate-current-line-or-region)
  (global-set-key (kbd "C-c o") 'crux-open-with)
  (global-set-key (kbd "C-c n") 'crux-cleanup-buffer-or-region)

  (global-set-key (kbd "C-\'") 'comment-dwim)
  (global-set-key (kbd "C-;") 'hsh-leader/body)
  (global-set-key (kbd "C-.") 'iedit-mode)

  (global-set-key (kbd "<f5>") 'compile)
  (global-set-key (kbd "<f6>") 'shortcuts/save-and-recompile)
  (global-set-key (kbd "<f7>") 'shortcuts/save-and-recompile-in-place)
  (global-set-key (kbd "<f8>") 'counsel-mark-ring)

  (global-set-key (kbd "C-M-x") 'transpose-frame)

  (global-set-key (kbd "«") 'hippie-expand)
  (global-set-key (kbd "∑") 'kill-ring-save)

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.

      \(fn arg char)"
    'interactive)
#+END_SRC

*** User-defined variables
#+BEGIN_SRC emacs-lisp
  (setq *user-config-file* "home-sweet-home.org")
#+END_SRC

*** User-defined functions
#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun eshell/d (&rest args)
    "Open Dired here."
    (dired (pop args)))

  (defun eshell/ff (&rest args)
    "Find file."
    (find-file (pop args)))

  (defun eshell/ffo (&rest args)
    "Find find in other window."
    (find-file-other-window (pop args)))

  (defun settings/open-shell ()
    "Opens a shell."
    (interactive)
    (ansi-term "/bin/zsh" "zsh"))

  (defun shortcuts/find-file-in-emacs-d (file)
    "This finds FILE in the .emacs.d directory."
    (find-file (concat user-emacs-directory file)))

  (defun shortcuts/edit-elisp-init-file ()
    "Opens init.el in the current window."
    (interactive)
    (shortcuts/find-file-in-emacs-d "init.el"))

  (defun shortcuts/edit-org-init-file ()
    "Opens default-init.org in the current window."
    (interactive)
    (shortcuts/find-file-in-emacs-d *user-config-file*))

  (defun shortcuts/kill-this-buffer ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun shortcuts/switch-to-scratch-buffer ()
    "Switches to the scratch buffer on the current window."
    (interactive)
    (switch-to-buffer "*scratch*"))

  (defun shortcuts/alternate-buffers ()
    "Flip-flops the most recently used buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (defun shortcuts/switch-to-minibuffer ()
    "Switch to minibuffer window."
    (interactive)
    (if (active-minibuffer-window)
      (select-window (active-minibuffer-window))
      (error "Minibuffer is not active")))

  (defun shortcuts/kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
    (delete-other-windows)
    (message "Deleted all other buffers!"))

  (defun shortcuts/save-and-recompile ()
    "Saves all files with changes and compiles."
    (interactive)
    (save-some-buffers 1)
    (recompile))

  (defun shortcuts/save-and-recompile-in-place ()
    "Saves all files with changes and compiles."
    (interactive)
    (save-some-buffers 1)
    (save-window-excursion
      (recompile)))

  (defun shortcuts/split-vertically-and-rebalance ()
    "Splits the window vertically and rebalances all windows."
    (interactive)
    (split-window-below)
    (balance-windows))

  (defun shortcuts/split-horizontally-and-rebalance ()
    "Splits the window horizontally and rebalances all windows."
    (interactive)
    (split-window-right)
    (balance-windows))

  (defun shortcuts/select-entire-line ()
    "Selects the entire line."
    (interactive)
    (end-of-line)
    (set-mark (line-beginning-position)))
#+END_SRC
** Quality of Life
#+BEGIN_SRC emacs-lisp
  (require 'ls-lisp)

  (setq-default indent-tabs-mode nil
    auto-hscroll-mode nil)

  (setq backup-by-copying t
    backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
    tramp-backup-directory-alist backup-directory-alist
    delete-old-versions t
    kept-new-versions 3
    kept-old-versions 2
    version-control t
    vc-cvs-stay-local nil
    undo-tree-auto-save-history nil)

  (defun save-all ()
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'save-all)

  (setq org-mode-startup-message "")
  (setq x-select-enable-clipboard t)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-kill-emacs 'y-or-n-p)
  (setq dired-listing-switches "-alh")

  ;; Supposedly, this fixes some weirdness with the mark's behavior.
  (when (fboundp 'delete-selection-mode)
    (delete-selection-mode t))

  (when (fboundp 'winner-mode)
    (winner-mode 1))

  (setq org-modules '(org-habit
                       org-irc
                       org-eval
                       org-expiry
                       org-interactive-query
                       org-man
                       org-collector
                       org-panel))

  (setq network-security-level 'low)

  (setenv "PAGER" "cat")
  (setenv "EDITOR" "emacsclient")

  (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n\"")
  (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

  (add-hook 'term-exec-hook (lambda ()
                              (let* ((buff (current-buffer))
                                      (proc (get-buffer-process buff)))
                                (lexical-let ((buff buff))
                                  (set-process-sentinel proc (lambda (process event)
                                                               (if (string= event "finished\n")
                                                                 (kill-buffer buff))))))))

  (setq frame-title-format
    '((:eval (if (buffer-file-name)
               (abbreviate-file-name (buffer-file-name))
               "%b"))))

  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                            try-expand-dabbrev-all-buffers
                                            try-expand-dabbrev-from-kill
                                            try-complete-file-name-partially
                                            try-complete-file-name
                                            try-expand-all-abbrevs
                                            try-expand-list
                                            try-expand-line
                                            try-complete-lisp-symbol-partially
                                            try-complete-lisp-symbol))

  ;; For the dark menu bar.
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))

  (when (fboundp 'menu-bar-mode) (menu-bar-mode 0))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode 0))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
  (when (fboundp 'display-time-mode) (display-time-mode t))

  ;; (setq deactivate-mark nil)
  (setq auto-window-vscroll nil)
  (setq transient-mark-mode t)

  ;; I prefer Iosevka Term, but it can be replaced with something else.
  ;; Recommended alternatives: mononoki, Pragmata Pro, Deja Vu Sans Mono
  (let ((font-family "IosevkaTerm Nerd Font Mono"))
    (when (find-font (font-spec :name font-family))
      (set-face-attribute 'default nil :family font-family :width 'normal :height 160 :underline nil :weight 'normal)))

  (setq comint-scroll-to-bottom-on-input t
    comint-scroll-to-bottom-on-output nil
    create-lockfiles nil
    disabled-command-function nil
    display-time-24hr-format t
    eshell-error-if-no-glob t
    eshell-hist-ignoredups t
    eshell-list-files-after-cd nil
    eshell-ls-initial-args "-alh"
    eshell-prefer-lisp-functions nil
    eshell-save-history-on-exit t
    eshell-scroll-to-bottom-on-input t
    eshell-scroll-to-bottom-on-output nil
    gc-cons-threshold 50000000
    inhibit-startup-message t
    initial-major-mode 'fundamental-mode
    initial-scratch-message org-mode-startup-message
    js-indent-level 2
    typescript-indent-level 2
    kill-whole-line t
    large-file-warning-threshold 100000000
    load-prefer-newer t
    ls-lisp-use-insert-directory-program nil
    next-line-add-newlines t
    org-checkbox-hierarchical-statistics nil
    org-clock-idle-time 10
    org-confirm-babel-evaluate nil
    sentence-end-double-space nil
    use-dialog-box nil
    visible-bell t)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (setq flycheck-check-syntax-automatically '(idle-change save mode-enabled))
    (setq flycheck-idle-change-delay 0.2)
    (flycheck-mode 1)
    (eldoc-mode 1)
    (tide-hl-identifier-mode 1)
    (company-mode 1))

  (when (fboundp 'persp-mode) (persp-mode 1))

  (add-hook 'html-mode-hook
    (lambda ()
      ;; Default indentation is usually 2 spaces, changing to 4.
      (set (make-local-variable 'sgml-basic-offset) 4)))

  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  ;; Trigger completion immediately.
  (setq company-idle-delay 0)

  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (setq company-show-numbers t)

  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  (company-tng-configure-default)
  (setq company-frontends
    '(company-tng-frontend
       company-pseudo-tooltip-frontend
       company-echo-metadata-frontend))

  (setq counsel-rg-base-command "rg -i -M 120 --no-heading --line-number --color never %s .")
  (setq lisp-indent-offset 2)

  (setq org-support-shift-select t)
  (setq ivy-use-selectable-prompt t)
  (setq org-duration-format (quote h:mm))
#+END_SRC

** Dotfiles/Scripts
#+BEGIN_SRC shell :tangle ~/.zshrc
  # The following lines were added by compinstall
  zstyle :compinstall filename "$HOME/.zshrc"

  autoload -Uz compinit
  compinit
  # End of lines added by compinstall

  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

  source "$HOME/minimal.zsh"

  [ -d "/opt/homebrew/Cellar/lua@5.1/5.1.5_8/" ] && eval $(luarocks --lua-dir=/opt/homebrew/Cellar/lua@5.1/5.1.5_8/ --lua-version=5.1 path)
  source "$HOME/.zshenv"

  alias love="/Applications/love.app/Contents/MacOS/love"
  alias love-build="/Applications/love-build.app/Contents/MacOS/love"
  [ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
  source "$EAT_SHELL_INTEGRATION_DIR/zsh"
#+END_SRC

#+BEGIN_SRC shell :tangle ~/.zshenv
  HISTFILE=~/.histfile
  HISTSIZE=1000
  SAVEHIST=1000
  bindkey -e

  export PATH="$HOME/.raku/bin:$PATH"
  export PATH="$HOME/.local/bin:$PATH"
  export AWS_SDK_LOAD_CONFIG=true
  export NVM_DIR="$HOME/.nvm"
  export DENO_INSTALL="$HOME/.deno"
  eval "$(~/.rakubrew/bin/rakubrew init Zsh)"
  export PATH="$HOME/.luarocks/bin:$PATH"
  export LUA_PATH='./?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;$HOME/.luarocks/share/lua/5.1/?.lua;$HOME/.luarocks/share/lua/5.1/?/init.lua'
  export LUA_CPATH='./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;$HOME/.luarocks/lib/lua/5.1/?.so'
  export PATH="$HOME/.luarocks/bin:$HOME/.local/bin:$HOME/.raku/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:$PATH"
  export PLAYDATE_SDK_PATH="$HOME/Desktop/PlaydateSDK-2.0.1"
  export PATH="$HOME/.nimble/bin:$PATH"
  export PATH="$PATH:/usr/local/go/bin"
  export PATH="/opt/homebrew/opt/llvm@14/bin:$PATH"
  export LDFLAGS="-L/opt/homebrew/opt/llvm@14/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/llvm@14/include"
#+END_SRC

#+BEGIN_SRC shell :tangle ~/minimal.zsh
  # Global settings
  MNML_OK_COLOR="${MNML_OK_COLOR:-2}"
  MNML_ERR_COLOR="${MNML_ERR_COLOR:-1}"

  MNML_USER_CHAR="${MNML_USER_CHAR:-λ}"
  MNML_INSERT_CHAR="${MNML_INSERT_CHAR:-›}"
  MNML_NORMAL_CHAR="${MNML_NORMAL_CHAR:-·}"
  MNML_ELLIPSIS_CHAR="${MNML_ELLIPSIS_CHAR:-..}"
  MNML_BGJOB_MODE=${MNML_BGJOB_MODE:-4}

  [ "${+MNML_PROMPT}" -eq 0 ] && MNML_PROMPT=(mnml_ssh mnml_pyenv mnml_status mnml_keymap)
  [ "${+MNML_RPROMPT}" -eq 0 ] && MNML_RPROMPT=('mnml_cwd 2 0' mnml_git)
  [ "${+MNML_INFOLN}" -eq 0 ] && MNML_INFOLN=(mnml_err mnml_jobs mnml_uhp mnml_files)

  [ "${+MNML_MAGICENTER}" -eq 0 ] && MNML_MAGICENTER=(mnml_me_dirs mnml_me_ls mnml_me_git)

  # Components
  function mnml_status {
      local okc="$MNML_OK_COLOR"
      local errc="$MNML_ERR_COLOR"
      local uchar="$MNML_USER_CHAR"

      local job_ansi="0"
      if [ -n "$(jobs | sed -n '$=')" ]; then
          job_ansi="$MNML_BGJOB_MODE"
      fi

      local err_ansi="$MNML_OK_COLOR"
      if [ "$MNML_LAST_ERR" != "0" ]; then
          err_ansi="$MNML_ERR_COLOR"
      fi

      printf '%b' "%{\e[$job_ansi;3${err_ansi}m%}%(!.#.$uchar)%{\e[0m%}"
  }

  function mnml_keymap {
      local kmstat="$MNML_INSERT_CHAR"
      [ "$KEYMAP" = 'vicmd' ] && kmstat="$MNML_NORMAL_CHAR"
      printf '%b' "$kmstat"
  }

  function mnml_cwd {
      local echar="$MNML_ELLIPSIS_CHAR"
      local segments="${1:-2}"
      local seg_len="${2:-0}"

      local _w="%{\e[0m%}"
      local _g="%{\e[38;5;244m%}"

      if [ "$segments" -le 0 ]; then
          segments=0
      fi
      if [ "$seg_len" -gt 0 ] && [ "$seg_len" -lt 4 ]; then
          seg_len=4
      fi
      local seg_hlen=$((seg_len / 2 - 1))

      local cwd="%${segments}~"
      cwd="${(%)cwd}"
      cwd=("${(@s:/:)cwd}")

      local pi=""
      for i in {1..${#cwd}}; do
          pi="$cwd[$i]"
          if [ "$seg_len" -gt 0 ] && [ "${#pi}" -gt "$seg_len" ]; then
              cwd[$i]="${pi:0:$seg_hlen}$_w$echar$_g${pi: -$seg_hlen}"
          fi
      done

      printf '%b' "$_g${(j:/:)cwd//\//$_w/$_g}$_w"
  }

  function mnml_git {
      local statc="%{\e[0;3${MNML_OK_COLOR}m%}" # assume clean
      local bname="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"

      if [ -n "$bname" ]; then
          if [ -n "$(git status --porcelain 2> /dev/null)" ]; then
              statc="%{\e[0;3${MNML_ERR_COLOR}m%}"
          fi
          printf '%b' "$statc$bname%{\e[0m%}"
      fi
  }

  function mnml_hg {
      local statc="%{\e[0;3${MNML_OK_COLOR}m%}" # assume clean
      local bname="$(hg branch 2> /dev/null)"
      if [ -n "$bname" ]; then
          if [ -n "$(hg status 2> /dev/null)" ]; then
              statc="%{\e[0;3${MNML_ERR_COLOR}m%}"
          fi
          printf '%b' "$statc$bname%{\e[0m%}"
      fi
  }

  function mnml_hg_no_color {
      # Assume branch name is clean
      local statc="%{\e[0;3${MNML_OK_COLOR}m%}"
      local bname=""
      # Defines path as current directory
      local current_dir=$PWD
      # While current path is not root path
      while [[ $current_dir != '/' ]]
      do
          if [[ -d "${current_dir}/.hg" ]]
          then
              if [[ -f "$current_dir/.hg/branch" ]]
              then
                  bname=$(<"$current_dir/.hg/branch")
              else
                  bname="default"
              fi
              printf '%b' "$statc$bname%{\e[0m%}"
              return;
          fi
          # Defines path as parent directory and keeps looking for :)
          current_dir="${current_dir:h}"
      done
  }

  function mnml_uhp {
      local _w="%{\e[0m%}"
      local _g="%{\e[38;5;244m%}"
      local cwd="%~"
      cwd="${(%)cwd}"

      printf '%b' "$_g%n$_w@$_g%m$_w:$_g${cwd//\//$_w/$_g}$_w"
  }

  function mnml_ssh {
      if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
          printf '%b' "$(hostname -s)"
      fi
  }

  function mnml_pyenv {
      if [ -n "$VIRTUAL_ENV" ]; then
          _venv="$(basename $VIRTUAL_ENV)"
          printf '%b' "${_venv%%.*}"
      fi
  }

  function mnml_err {
      local _w="%{\e[0m%}"
      local _err="%{\e[3${MNML_ERR_COLOR}m%}"

      if [ "${MNML_LAST_ERR:-0}" != "0" ]; then
          printf '%b' "$_err$MNML_LAST_ERR$_w"
      fi
  }

  function mnml_jobs {
      local _w="%{\e[0m%}"
      local _g="%{\e[38;5;244m%}"

      local job_n="$(jobs | sed -n '$=')"
      if [ "$job_n" -gt 0 ]; then
          printf '%b' "$_g$job_n$_w&"
      fi
  }

  function mnml_files {
      local _w="%{\e[0m%}"
      local _g="%{\e[38;5;244m%}"

      local a_files="$(ls -1A | sed -n '$=')"
      local v_files="$(ls -1 | sed -n '$=')"
      local h_files="$((a_files - v_files))"

      local output="${_w}[$_g${v_files:-0}"
      if [ "${h_files:-0}" -gt 0 ]; then
          output="$output $_w($_g$h_files$_w)"
      fi
      output="$output${_w}]"

      printf '%b' "$output"
  }

  # Magic enter functions
  function mnml_me_dirs {
      local _w="\e[0m"
      local _g="\e[38;5;244m"

      if [ "$(dirs -p | sed -n '$=')" -gt 1 ]; then
          local stack="$(dirs)"
          echo "$_g${stack//\//$_w/$_g}$_w"
      fi
  }

  function mnml_me_ls {
      if [ "$(uname)" = "Darwin" ] && ! ls --version &> /dev/null; then
          COLUMNS=$COLUMNS CLICOLOR_FORCE=1 ls -C -G -F
      else
          ls -C -F --color="always" -w $COLUMNS
      fi
  }

  function mnml_me_git {
      git -c color.status=always status -sb 2> /dev/null
  }

  # Wrappers & utils
  # join outpus of components
  function _mnml_wrap {
      local -a arr
      arr=()
      local cmd_out=""
      local cmd
      for cmd in ${(P)1}; do
          cmd_out="$(eval "$cmd")"
          if [ -n "$cmd_out" ]; then
              arr+="$cmd_out"
          fi
      done

      printf '%b' "${(j: :)arr}"
  }

  # expand string as prompt would do
  function _mnml_iline {
      echo "${(%)1}"
  }

  # display magic enter
  function _mnml_me {
      local -a output
      output=()
      local cmd_out=""
      local cmd
      for cmd in $MNML_MAGICENTER; do
          cmd_out="$(eval "$cmd")"
          if [ -n "$cmd_out" ]; then
              output+="$cmd_out"
          fi
      done
      printf '%b' "${(j:\n:)output}" | less -XFR
  }

  # capture exit status and reset prompt
  function _mnml_zle-line-init {
      MNML_LAST_ERR="$?" # I need to capture this ASAP
      zle reset-prompt
  }

  # redraw prompt on keymap select
  function _mnml_zle-keymap-select {
      zle reset-prompt
  }

  # draw infoline if no command is given
  function _mnml_buffer-empty {
      if [ -z "$BUFFER" ]; then
          _mnml_iline "$(_mnml_wrap MNML_INFOLN)"
          _mnml_me
          zle redisplay
      else
          zle accept-line
      fi
  }

  # properly bind widgets
  # see: https://github.com/zsh-users/zsh-syntax-highlighting/blob/1f1e629290773bd6f9673f364303219d6da11129/zsh-syntax-highlighting.zsh#L292-L356
  function _mnml_bind_widgets() {
      zmodload zsh/zleparameter

      local -a to_bind
      to_bind=(zle-line-init zle-keymap-select buffer-empty)

      typeset -F SECONDS
      local zle_wprefix=s$SECONDS-r$RANDOM

      local cur_widget
      for cur_widget in $to_bind; do
          case "${widgets[$cur_widget]:-""}" in
              user:_mnml_*);;
              user:*)
                  zle -N $zle_wprefix-$cur_widget ${widgets[$cur_widget]#*:}
                  eval "_mnml_ww_${(q)zle_wprefix}-${(q)cur_widget}() { _mnml_${(q)cur_widget}; zle ${(q)zle_wprefix}-${(q)cur_widget} }"
                  zle -N $cur_widget _mnml_ww_$zle_wprefix-$cur_widget
                  ;;
              ,*)
                  zle -N $cur_widget _mnml_$cur_widget
                  ;;
          esac
      done
  }

  # Setup
  autoload -U colors && colors
  setopt prompt_subst

  PROMPT='$(_mnml_wrap MNML_PROMPT) '
  RPROMPT='$(_mnml_wrap MNML_RPROMPT)'

  _mnml_bind_widgets

  bindkey -M main  "^M" buffer-empty
  bindkey -M vicmd "^M" buffer-empty
#+END_SRC
